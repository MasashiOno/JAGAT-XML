<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:functx="http://www.functx.com"
	       xmlns="http://www.w3.org/1999/xhtml"
	       xmlns:dc="http://purl.org/dc/elements/1.1/"
	       xmlns:ncx="http://www.daisy.org/z3986/2005/ncx/"
	       xmlns:dcterms="http://purl.org/dc/terms/"
	       xmlns:opf="http://www.idpf.org/2007/opf"
	       xmlns:h="http://www.w3.org/1999/xhtml"
	       xmlns:e="http://github.com/oreillymedia/epubrenderer"
               stylesheet="../epub.xsl">

  <!-- Test suite for opf.xsl -->

  <!-- Global params for testing -->
  <x:param name="metadata.ibooks-specified-fonts" select="1"/>

  <x:param name="package.namespaces">
    <opf.foo/>
    <dc:foo/>
    <dcterms:foo/>
  </x:param>

  <x:param name="ncx.toc.id" select="'tocncx'"/>
  <x:param name="ncx.toc.filename" select="'toc.ncx'"/>
  <x:param name="css.id" select="'bookcss'"/>
  <x:param name="epub.cover.html.id" select="'bookcover'"/>
  <x:param name="cover.html.filename" select="'cover.html'"/>
  <x:param name="root.chunk.filename" select="'index.html'"/>
  <x:param name="epub.cover.image.id" select="'bookcoverimage'"/>

  <x:param name="embedded.fonts.list">DejaVuSerif.otf
DejaVuSans-Bold.otf
UbuntuMono-Regular.otf
UbuntuMono-Bold.otf
UbuntuMono-BoldItalic.otf
UbuntuMono-Italic.otf</x:param>
  
  <x:scenario label="When get.fonts.xml is run">
    <x:call template="get.fonts.xml">
      <x:param name="fonts.to.process">DejaVuSerif.otf
DejaVuSerif.ttf
UbuntuMono-Regular.otf
</x:param>
    </x:call>
    <x:expect label="it should return an XML-formatted lists of fonts with proper mimetypes">
      <e:fonts>
	<e:font filename="DejaVuSerif.otf" mimetype="application/vnd.ms-opentype"/>
	<e:font filename="DejaVuSerif.ttf" mimetype="font/truetype"/>
	<e:font filename="UbuntuMono-Regular.otf" mimetype="application/vnd.ms-opentype"/>
      </e:fonts>
    </x:expect>
  </x:scenario>

  <x:scenario label="When generate.opf is run">
    <x:call template="generate.opf.content"/>
    <x:scenario label="with generate.guide disabled">
      <x:call>
	<x:param name="generate.guide" select="0"/>
      </x:call>
      <x:expect test="not(exists(/opf:package/opf:guide))"/>
    </x:scenario>
    <x:expect label="A package root element should be generated with the proper namespaces">
      <package xmlns="http://www.idpf.org/2007/opf" 
	       xmlns:opf="http://www.idpf.org/2007/opf"
	       xmlns:dc="http://purl.org/dc/elements/1.1/"
	       xmlns:dcterms="http://purl.org/dc/terms/"
	       version="3.0"
	       prefix="ibooks: http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0/"
	       unique-identifier="pub-identifier">...</package>
    </x:expect>
    <x:expect label="The OPF package should contain a metadata element" test="exists(/opf:package/opf:metadata)"/>
    <x:expect label="The OPF package should contain a manifest element" test="exists(/opf:package/opf:manifest)"/>
    <x:expect label="The OPF package should contain a spine element" test="exists(/opf:package/opf:spine)"/>
    <x:expect label="The OPF package should contain a guide element by default" test="exists(/opf:package/opf:guide)"/>
  </x:scenario>

  <x:scenario label="When opf.manifest is run">
    <x:call template="opf.manifest"/>
    <!-- Based on font list specified in global param $embedded.fonts.list -->
    <x:expect label="there should be items for each font" test="exists(/opf:manifest/opf:item[@href='DejaVuSerif.otf']) and
								exists(/opf:manifest/opf:item[@href='DejaVuSans-Bold.otf']) and
								exists(/opf:manifest/opf:item[@href='UbuntuMono-Regular.otf']) and
								exists(/opf:manifest/opf:item[@href='UbuntuMono-Bold.otf']) and
								exists(/opf:manifest/opf:item[@href='UbuntuMono-BoldItalic.otf']) and
								exists(/opf:manifest/opf:item[@href='UbuntuMono-Italic.otf'])"/>
    <x:scenario label="with NCX generation enabled">
      <x:call>
	<x:param name="generate.ncx.toc" select="1"/>
      </x:call>
      <x:expect label="there should be a manifest item for the NCX TOC" test="exists(/opf:manifest/opf:item[@id = 'tocncx' and 
									      @href = 'toc.ncx' and 
									      @media-type= 'application/x-dtbncx+xml'])"/>
    </x:scenario>
    <x:scenario label="with NCX generation disabled">
      <x:call>
	<x:param name="generate.ncx.toc" select="0"/>
      </x:call>
      <x:expect label="there *should not* be a manifest item for the NCX TOC" test="not(exists(/opf:manifest/opf:item[@id = 'tocncx']))"/>
    </x:scenario>

    <x:scenario label="with CSS provided">
      <x:call>
	<x:param name="css.filename" select="'core.css'"/>
      </x:call>
      <x:expect label="there should be a manifest item for the CSS" test="exists(/opf:manifest/opf:item[@id = 'bookcss' and
									  @href = 'core.css' and
									  @media-type= 'text/css'])"/>
    </x:scenario>
    <x:scenario label="with no CSS provided">
      <x:call>
	<x:param name="css.filename" select="''"/>
      </x:call>
      <x:expect label="there *should not* be a manifest item for the CSS" test="not(exists(/opf:manifest/opf:item[@id = 'bookcss']))"/>
    </x:scenario>

    <x:scenario label="with cover HTML file enabled">
      <x:call>
	<x:param name="generate.cover.html" select="1"/>
      </x:call>
      <x:expect label="there should be a manifest item for the cover" test="exists(/opf:manifest/opf:item[@id = 'bookcover' and
									  @href = 'cover.html' and
									  @media-type= 'application/xhtml+xml'])"/>
    </x:scenario>
    <x:scenario label="with cover HTML file disabled">
      <x:call>
	<x:param name="generate.cover.html" select="0"/>
      </x:call>
      <x:expect label="there *should not* be a manifest item for the cover" test="not(exists(/opf:manifest/opf:item[@id = 'bookcover']))"/>
    </x:scenario>

    <x:scenario label="with root chunk generation enabled">
      <x:call>
	<x:param name="generate.root.chunk" select="1"/>
      </x:call>
      <x:expect label="there should be a manifest item for the root chunk" test="exists(/opf:manifest/opf:item[@href = 'index.html' and
										 @media-type= 'application/xhtml+xml'])"/>
    </x:scenario>

    <x:scenario label="with root chunk generation disabled">
      <x:call>
	<x:param name="generate.root.chunk" select="0"/>
      </x:call>
      <x:expect label="there *should not* be a manifest item for the root chunk" test="not(exists(/opf:manifest/opf:item[@href = 'index.html']))"/>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When manifest-images is called">
    <x:call template="manifest-images">
      <x:param name="img-nodes">
	<img src="puppy.jpg"/>
	<img src="kitty.png"/>
	<img src="birdie.gif"/>
	<img src="puppy.jpg"/>
      </x:param>
    </x:call>
    <x:expect label="there should be an item for each img src in the source files"
	      test="every $image in ('puppy.jpg', 'kitty.png', 'birdie.gif')
		    satisfies (exists(//opf:item[@href=$image]))"/>
    <x:expect label="image items should have the correct mimetype" test="(every $image in (//opf:item[substring-after(@href, '.') = 'gif']) 
									 satisfies ($image[@media-type = 'image/gif'])) and
									 (every $image in (//opf:item[substring-after(@href, '.') = 'jpg']) 
									 satisfies ($image[@media-type = 'image/jpeg'])) and
									 (every $image in (//opf:item[substring-after(@href, '.') = 'png']) 
									 satisfies ($image[@media-type = 'image/png']))"/>
    <x:expect label="and there should be only one item that references each image file" test="not(exists(//@href[(. = preceding::opf:item/@href) or (. = following::opf:item/@href)]))"/> 
    <x:scenario label="on a cover image">
      <x:call>
	<!-- Test XSL is output to a subdir of the .xspec dir, which also contains skeleton, so relative path contains .. to go up a directory level -->
	<x:param name="img-nodes" select="document('../skeleton.html')//h:figure[@data-type='cover']//h:img"/>
      </x:call>
      <x:expect label="the item should have the proper cover-image id and cover-image property set">
	<opf:item id="bookcoverimage" href="..." media-type="..." properties="cover-image"/>
      </x:expect>
    </x:scenario>
  </x:scenario>

<!--
  <x:pending>

  <x:scenario label="When manifest-html is called (no embedded MathML or SVG in chunks)">
    <x:call template="manifest-html">
      <x:param name="chunk-nodes">
	<section data-type="chapter">
	  <h1>Chapter Title</h1>
	  <p>Chapter text</p>
	</section>
	<section data-type="sect1">
	  <h1>Sect1 Title</h1>
	  <p>Sect1 text</p>
	</section>
	<section data-type="appendix">
	  <h1>Appendix Title</h1>
	  <p>Appendix text</p>
	</section>
      </x:param>
    </x:call>
    <x:expect label="there should be an item for each chunk node in the source files with an id, href, and the proper media-type"
	      test="count(//opf:item[@href and @id and @media-type='application/xhtml+xml']) = 4"/>
    <x:expect label="there should be no special properties" test="count(//opf:item[@properties]) = 0"/>
  </x:scenario>

  <x:scenario label="When manifest-html is called for a chunk node that contains MathML">
    <x:call template="manifest-html">
      <x:param name="chunk-nodes">
	<section data-type="chapter">
	  <h1>Chapter Title</h1>
	  <p>Chapter text</p>
	  <p>Here's some MathML:</p>
	  <math xmlns="http://www.w3.org/1998/Math/MathML"/>
	</section>
      </x:param>
    </x:call>
    <x:expect label="MathML should be present in the item properties"
	      test="exists(//opf:item[contains(@properties, 'math')])"/>
  </x:scenario>

  <x:scenario label="When manifest-html is called for a chunk node that contains SVG">
    <x:call template="manifest-html">
      <x:param name="chunk-nodes">
	<section data-type="chapter">
	  <h1>Chapter Title</h1>
	  <p>Chapter text</p>
	  <p>Here's some SVG:</p>
	  <svg xmlns="http://www.w3.org/2000/svg"/>
	</section>
      </x:param>
    </x:call>
    <x:expect label="SVG should be present in the item properties"
	      test="exists(//opf:item[contains(@properties, 'svg')])"/>
  </x:scenario>

  <x:scenario label="When manifest-html is called for a chunk node that contains MathML *and* SVG">
    <x:call template="manifest-html">
      <x:param name="chunk-nodes">
	<section data-type="chapter">
	  <h1>Chapter Title</h1>
	  <p>Chapter text</p>
	  <p>Here's some MathML:</p>
	  <math xmlns="http://www.w3.org/1998/Math/MathML"/>
	  <p>Here's some SVG:</p>
	  <svg xmlns="http://www.w3.org/2000/svg"/>
	</section>
      </x:param>
    </x:call>
    <x:expect label="Math *and* SVG should be present in the item properties"
	      test="exists(//opf:item[contains(@properties, 'math') and contains(@properties, 'svg')])"/>
  </x:scenario>

    <x:scenario label="When generating OPF metadata">
      <x:call template="opf.metadata"/>
      <x:expect label="Identifier should be generated"/>
      <x:expect label="Title should be geneated"/>
      <x:expect label="Language should be generated"/>
      <x:expect label="Modified date should be generated"/>
      <x:expect label="Rights information should be generated if present"/>
      <x:expect label="Rights information *should not* be generated if *not* present"/>
      <x:expect label="Publisher information should be generated if present"/>
      <x:expect label="Publisher information *should not* be generated if *not* present"/>
      <x:expect label="Subject (category) information should be generated if present"/>
      <x:expect label="Subject (category) information *should not* be generated if *not* present"/>
      <x:expect label="Publication date information should be generated if present"/>
      <x:expect label="Publication date information *should not* be generated if *not* present"/>
      <x:expect label="Description information should be generated if present"/>
      <x:expect label="Description information *should not* be generated if *not* present"/>
      <x:expect label="Contributor information should be generated if present"/>
      <x:expect label="Contributor information *should not* be generated if *not* present"/>
      <x:expect label="Creator information should be generated properly (if present) for one author"/>
      <x:expect label="Creator information should be generated properly (if present) for two authors"/>
      <x:expect label="Creator information should be generated properly (if present) for more than two authors"/>
      <x:expect label="Creator information *should not* be generated if *not* present"/>
      <x:expect label="Cover metadata should be generated if book has a cover"/>
      <x:expect label="Cover metadata *should not* be generated if book does not have a cover"/>
      <x:expect label="iBooks metadata should be generated if specified"/>
      <x:expect label="iBooks metadata *should not* be generated if *not* specified"/>
    </x:scenario>
  </x:pending> -->
</x:description>
